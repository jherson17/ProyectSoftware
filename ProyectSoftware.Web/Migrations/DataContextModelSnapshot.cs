// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProyectSoftware.Web.Data;

#nullable disable

namespace ProyectSoftware.Web.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProyectSoftware.Web.Data.Entities.Author", b =>
                {
                    b.Property<string>("StageName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StageName");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("ProyectSoftware.Web.Data.Entities.GenderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("GenderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GenderTypes");
                });

            modelBuilder.Entity("ProyectSoftware.Web.Data.Entities.HasSongGender", b =>
                {
                    b.Property<int>("IdGender")
                        .HasColumnType("int");

                    b.Property<int>("IdSong")
                        .HasColumnType("int");

                    b.Property<int>("GenderTypeId")
                        .HasColumnType("int");

                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.HasKey("IdGender", "IdSong");

                    b.HasIndex("GenderTypeId");

                    b.HasIndex("SongId");

                    b.ToTable("HasSongsGenders");
                });

            modelBuilder.Entity("ProyectSoftware.Web.Data.Entities.HasSongPlaylist", b =>
                {
                    b.Property<int>("IdPlaylist")
                        .HasColumnType("int");

                    b.Property<int>("IdSong")
                        .HasColumnType("int");

                    b.Property<int>("PlaylistId")
                        .HasColumnType("int");

                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.HasKey("IdPlaylist", "IdSong");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("SongId");

                    b.ToTable("HasSongPlaylists");
                });

            modelBuilder.Entity("ProyectSoftware.Web.Data.Entities.HasSongUser", b =>
                {
                    b.Property<int>("IdSong")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("IdSong", "IdUser");

                    b.HasIndex("SongId");

                    b.HasIndex("UserId");

                    b.ToTable("HasSongUsers");
                });

            modelBuilder.Entity("ProyectSoftware.Web.Data.Entities.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Playlists");
                });

            modelBuilder.Entity("ProyectSoftware.Web.Data.Entities.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorStageName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duracion")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorStageName");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("ProyectSoftware.Web.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Edad")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ProyectSoftware.Web.Data.Entities.HasSongGender", b =>
                {
                    b.HasOne("ProyectSoftware.Web.Data.Entities.GenderType", "GenderType")
                        .WithMany("HasSongGender")
                        .HasForeignKey("GenderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProyectSoftware.Web.Data.Entities.Song", "Song")
                        .WithMany("HasSongGender")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GenderType");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("ProyectSoftware.Web.Data.Entities.HasSongPlaylist", b =>
                {
                    b.HasOne("ProyectSoftware.Web.Data.Entities.Playlist", "Playlist")
                        .WithMany("HasSongPlaylist")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProyectSoftware.Web.Data.Entities.Song", "Song")
                        .WithMany("HasSongPlaylist")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("ProyectSoftware.Web.Data.Entities.HasSongUser", b =>
                {
                    b.HasOne("ProyectSoftware.Web.Data.Entities.Song", "Song")
                        .WithMany("HasSongUser")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProyectSoftware.Web.Data.Entities.User", "User")
                        .WithMany("HasSongUser")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Song");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ProyectSoftware.Web.Data.Entities.Song", b =>
                {
                    b.HasOne("ProyectSoftware.Web.Data.Entities.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorStageName");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("ProyectSoftware.Web.Data.Entities.GenderType", b =>
                {
                    b.Navigation("HasSongGender");
                });

            modelBuilder.Entity("ProyectSoftware.Web.Data.Entities.Playlist", b =>
                {
                    b.Navigation("HasSongPlaylist");
                });

            modelBuilder.Entity("ProyectSoftware.Web.Data.Entities.Song", b =>
                {
                    b.Navigation("HasSongGender");

                    b.Navigation("HasSongPlaylist");

                    b.Navigation("HasSongUser");
                });

            modelBuilder.Entity("ProyectSoftware.Web.Data.Entities.User", b =>
                {
                    b.Navigation("HasSongUser");
                });
#pragma warning restore 612, 618
        }
    }
}
